// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Event {
  id            Int     @id @default(autoincrement())
  title         String
  description   String
  startsAt      DateTime
  endsAt        DateTime
  locationId    Int
  categoryId    Int
  userId        String

  location      Location @relation(fields: [locationId], references: [id])
  category      Category @relation(fields: [categoryId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  address     String
  prefecture  String
  city        String
  postalCode  String

  events      Event[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  
  events      Event[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  events        Event[]
}

